<?php
	namespace Me\Korolevsky\BonchBot\Handlers;

	require '../Autoload.php';
	error_reporting(0);

	use RedBeanPHP\R;
	use Me\Korolevsky\BonchBot\LK;
	use Me\Korolevsky\BonchBot\Api;
	use Me\Korolevsky\BonchBot\Data;
	use JetBrains\PhpStorm\NoReturn;

	class AutoSetMark {

		private Api $api;
		private int $start_time;

		private array $logs;
		private array $schedule;

		#[NoReturn]
		public function __construct() {
			if(php_sapi_name() != "cli") die("Hacking attempt!");
			$this->start_time = microtime(true);

			self::init();
			self::start();
		}

		#[NoReturn]
		public function __destruct() {
			if(count($this->logs) > 2) {
				$peer_ids = json_decode(R::findOne('settings', 'WHERE `name` = ?', [ 'chats_logs' ])['value'], true);

				$path = '../Files/'.date('d.m.Y-H:i:s').'-bonchbot-asm.log';
				file_put_contents($path, var_export($this->logs, true));

				$doc = $this->api->getVkApi()->uploadFile($path, 171812976);
				unlink($path);

				if(!$doc) { // ”ò–≥”ô—Ä –ª–æ–≥ –±–∞—Ä–ª—ã–∫–∫–∞ –∫–∏–ª–º”ô–≥”ô–Ω –±—É –≤–∫, —è–≥—ä–Ω–∏ –±–µ–∑ “ó–∏–±”ô—Ä–º–∏–±–µ–∑ —Ö”ô–±”ô—Ä ”©—á–µ–Ω —Ç“Ø–≥–µ–ª, —Å–∞–∫–ª–∞—Ä–≥–∞, –∞–Ω—ã —Å–µ—Ä–≤–µ—Ä–µ.
					return;
				}

				$this->api->getVkApi()->sendMessage(
					"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–º–µ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É (".round(microtime(true)-$this->start_time, 3)." —Å–µ–∫.) –∏ –ø—Ä–∏—Å–ª–∞–ª –ª–æ–≥-—Ñ–∞–π–ª, –æ–Ω –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.\n\n#handler_asm",
					[
						'forward' => [],
						'attachment' => $doc,
						'peer_ids' => $peer_ids,
					]
				);
			}
		}

		private function init() {
			$this->api = new Api(Data::TOKENS['public'], [], false);
			$this->logs[] = date('[d.m.Y H:i:s]')." –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ API.";

			$this->schedule = R::getAll("SELECT * FROM `schedule` WHERE `date` = ? AND `status` != ? AND `status` != ?", [ date('d.m.Y'), 1000, -1 ]) ?? [];
			$this->logs[] = date('[d.m.Y H:i:s]')." –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–º–µ—Ç–æ–∫. (".count($this->schedule).").";
		}

		private function start() {
			$vkApi = $this->api->getVkApi();
			foreach($this->schedule as $item) {
				$item = R::convertToBean('schedule', $item);

				$exp = explode(' ', $item['num_with_time']);
				if(count($exp) > 1) {
					$time = [
						strtotime(date('d.m.Y '.explode('-', str_replace(['(', ')', ':'], ['','','.'], $exp[1]))[0])) - 600,
						strtotime(date('d.m.Y '.explode('-', str_replace(['(', ')', ':'], ['','','.'], $exp[1]))[1]))
					];
				} else {
					$time = [
						strtotime(date('d.m.Y '.explode('-', $item['num_with_time'])[0])) - 600,
						strtotime(date('d.m.Y '.explode('-', $item['num_with_time'])[1]))
					];
				}

				if(!($time[0] < time() && $time[1] > time())) {
					continue;
				}

				$this->logs[] = [
					'text' => date('[d.m.Y H:i:s]')." –ó–∞–ø–∏—Å—å –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—Ä–µ–º—è.",
					'data' => $item->export()
				];

				$lk = new LK(intval($item['user_id']));
				if($lk->auth() != 1) {
					if($item['status'] == 2) {
						$vkApi->sendMessage("‚öôÔ∏è –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –õ–ö, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É.\n–ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –±—É–¥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è, –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã.", [
							'peer_id' => $item['user_id'], 'forward' => []
						]);
					}
					$this->logs[] = date('[d.m.Y H:i:s]')." –ù–µ—É–¥–∞—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.";

					$item['status'] += 1;
					R::store($item);
					continue;
				}
				$this->logs[] = date('[d.m.Y H:i:s]')." –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.";


				$sked = $lk->getSchedule($item['date']);
				$this_lesson = null;

				foreach($sked['items'] as $lesson) {
					if($lesson['num_with_time'] == $item['num_with_time'] && $lesson['teacher'] == $item['teacher']) {
						$this_lesson = $lesson;
						break;
					}
				}

				if($this_lesson == null || $this_lesson['marking']['status'] == -1) {
					if($item['status'] == 2) {
						$vkApi->sendMessage("Ô∏è‚öôÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ, –±–æ—Ç –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n–ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –±—É–¥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è, –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã.", [
							'peer_id' => $item['user_id'], 'forward' => []
						]);
					}
					$this->logs[] = [
						'text' => date('[d.m.Y H:i:s]')." –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –ª–∏–±–æ –µ–≥–æ —Å—Ç–∞—Ç—É—Å -1.",
						'schedule' => $sked['items']
					];

					$item['status'] += 1;
					R::store($item);
					continue;
				}

				$this->logs[] = [
					'text' => date('[d.m.Y H:i:s]')." –ü—Ä–µ–¥–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.",
					'obj' => $this_lesson
				];

				$marking = $this_lesson['marking'];
				$schedule_name = "[club".Data::GROUP_ID."|${this_lesson['name']} (${this_lesson['teacher']})]";

				if($marking['status'] == 0) {
					if($item['status'] == 2) {
						$vkApi->sendMessage("‚öôÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ $schedule_name –Ω–µ —É–¥–∞–ª–æ—Å—å, –±—É–¥—É—Ç –µ—â—ë –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è, —è –ø—Ä–∏—à–ª—é –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥.", [
							'peer_id' => $item['user_id'], 'forward' => []
						]);
					}

					$item['status'] += 1;
					if($time[1] - time() <= 300) {
						$vkApi->sendMessage("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ $schedule_name, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –∑–∞–Ω—è—Ç–∏–µ.", [
							'peer_id' => $item['user_id'], 'forward' => []
						]);
						$item['status'] = -1;
						$this->logs[] = date('[d.m.Y H:i:s]')." –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.";
					}

					R::store($item);
					continue;
				} elseif($marking['status'] == 2) {
					$vkApi->sendMessage("ü§î –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –Ω–∞ –ø–∞—Ä–µ $schedule_name –¥–æ –±–æ—Ç–∞, –∫–∞–∫–æ–π –í—ã –º–æ–ª–æ–¥–µ—Ü!", [
						'peer_id' => $item['user_id'], 'forward' => []
					]);

					$item['status'] = 1000;
					R::store($item);
					continue;
				}

				$lk->setMark(intval($marking['id']), intval($sked['week']));
				$item['status'] = 1000;
				R::store($item);

				if($marking['remote'] != null) {
					$vkApi->sendMessage("‚úÖ –í—ã –±—ã–ª–∏ –æ—Ç–º–µ—á–µ–Ω—ã –Ω–∞ –ø–∞—Ä–µ $schedule_name.\nüìö –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏–µ: ${marking['remote']}", [
						'peer_id' => $item['user_id'], 'forward' => []
					]);
				} else {
					$vkApi->sendMessage("‚úÖ –í—ã –±—ã–ª–∏ –æ—Ç–º–µ—á–µ–Ω—ã –Ω–∞ –ø–∞—Ä–µ $schedule_name.", [
						'peer_id' => $item['user_id'], 'forward' => []
					]);
				}

				$this->logs[] = date('[d.m.Y H:i:s]')." –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ –Ω–∞ –ø–∞—Ä–µ.";
			}
		}
	}

	new AutoSetMark();